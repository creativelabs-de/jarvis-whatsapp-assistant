name: JARVIS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: gcr.io
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  IMAGE_NAME: jarvis-backend

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/test-requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test-requirements.txt
    
    - name: Run linting
      run: |
        cd backend
        pip install flake8 black isort
        flake8 app/ --max-line-length=100 --ignore=E203,W503
        black --check app/
        isort --check-only app/
    
    - name: Run tests
      env:
        REDIS_URL: redis://localhost:6379
        WHATSAPP_ACCESS_TOKEN: test_token
        WHATSAPP_PHONE_NUMBER_ID: test_id
        WHATSAPP_WEBHOOK_VERIFY_TOKEN: test_verify_token
        OPENAI_API_KEY: test_openai_key
      run: |
        cd backend
        pytest tests/ \
          --cov=app \
          --cov-report=xml \
          --cov-report=term-missing \
          -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Security scan
      run: |
        cd backend
        pip install safety bandit
        safety check
        bandit -r app/ -f json -o bandit-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: backend/bandit-report.json

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials jarvis-staging-cluster \
          --zone us-central1-a \
          --project ${{ env.PROJECT_ID }}
    
    - name: Deploy to staging
      run: |
        # Update image in deployment
        sed -i "s|gcr.io/YOUR_PROJECT_ID|${{ env.REGISTRY }}/${{ env.PROJECT_ID }}|g" k8s/deployment.yaml
        sed -i "s|:latest|:${{ github.sha }}|g" k8s/deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/
        
        # Wait for rollout to complete
        kubectl rollout status deployment/jarvis-backend
    
    - name: Run smoke tests
      run: |
        # Get service URL
        EXTERNAL_IP=$(kubectl get service jarvis-backend-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Wait for service to be ready
        sleep 30
        
        # Run smoke tests
        curl -f http://$EXTERNAL_IP/health || exit 1
        echo "Staging deployment successful!"

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
    
    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials jarvis-production-cluster \
          --zone us-central1-a \
          --project ${{ env.PROJECT_ID }}
    
    - name: Deploy to production
      run: |
        # Update image in deployment
        sed -i "s|gcr.io/YOUR_PROJECT_ID|${{ env.REGISTRY }}/${{ env.PROJECT_ID }}|g" k8s/deployment.yaml
        sed -i "s|:latest|:${{ github.sha }}|g" k8s/deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/
        
        # Wait for rollout to complete
        kubectl rollout status deployment/jarvis-backend
    
    - name: Run production smoke tests
      run: |
        # Test production endpoint
        curl -f https://your-domain.com/health || exit 1
        echo "Production deployment successful!"
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          ðŸš€ JARVIS deployed to production!
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
      if: always()
